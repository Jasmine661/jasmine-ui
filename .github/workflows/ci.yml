# CI/CD 管道配置文件
# 这个文件定义了当代码推送到 GitHub 时自动执行的构建、测试和部署流程

# actions的名字
name: CI/CD Pipeline

# 触发条件：定义什么时候运行这个工作流
on:
  # 当代码推送到 main 或 develop 分支时触发
  push:
    branches: [ main, develop ]
  # 当有人创建或更新 Pull Request 到 main 分支时触发
  pull_request:
    branches: [ main ]
  # 当创建 GitHub Release 时触发
  release:
    types: [ published ]

# 定义要执行的任务
jobs:
  # 第一个任务：测试和代码检查
  test:
    name: Test & Lint
    runs-on: ubuntu-latest  
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # 先安装 pnpm
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.9.0
        
    # 然后设置 Node.js 和缓存
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
        cache-dependency-path: 'pnpm-lock.yaml'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run linting
      run: pnpm run lint
      
    - name: Run tests
      run: pnpm run test:nowatch
  
  build-and-publish:
    name: Build & Publish
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    # 添加权限配置
    permissions:
      contents: write
      packages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整 git 历史，便于版本管理
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.9.0
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: 'pnpm-lock.yaml'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build package
      run: pnpm run build

    - name: Bump version
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        pnpm version patch -m "chore: release v%s"
        git push origin main 
      
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.ref_name }}
        release_name: Release v${{ github.ref_name }}
        body: |
          Automated release via CI/CD
        draft: false
        prerelease: false

  # 第三个任务：构建 Storybook 并部署到 GitHub Pages
  deploy-storybook:
    name: Deploy Storybook
    runs-on: ubuntu-latest
    needs: test  # 依赖测试任务完成
    # 只在推送到 main 分支时执行
    if: github.ref == 'refs/heads/main'
    
    # 设置 GitHub Pages 所需的权限
    permissions:
      contents: read    # 读取仓库内容
      pages: write      # 写入 GitHub Pages
      id-token: write   # 写入身份令牌
      
    steps:
    # 步骤1：检出代码
    - name: Checkout code
      uses: actions/checkout@v4
      
    # 先安装 pnpm
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.9.0
      
    # 步骤2：设置 Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: 'pnpm-lock.yaml'
        
    # 步骤4：安装依赖
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    # 步骤5：构建 Storybook 静态文件
    - name: Build Storybook
      run: pnpm run build-storybook
      
    # 步骤6：配置 GitHub Pages
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    # 步骤7：上传构建产物
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: storybook-static  # Storybook 构建输出目录
        
    # 步骤8：部署到 GitHub Pages
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4